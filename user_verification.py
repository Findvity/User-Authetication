# -*- coding: utf-8 -*-
"""FindVity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ADJwnsaAeEzjTSTGWLBfwUtRlFOXU34D
"""

!pip install face_recognition

!apt update
!apt install -y cmake
!pip install dlib

!sudo apt install tesseract-ocr
!pip install pytesseract

# from google.colab import files
# uploaded = files.upload()

#!/usr/bin/env python
import os
import os.path
import json
import sys
import pytesseract
import re
import csv
import dateutil.parser as dparser
from PIL import Image
import shutil
import random
import numpy as np
import cv2
import os,glob
import face_recognition
from google.colab.patches import cv2_imshow
import cv2
from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def findencoding(cropped):
    cropped=cv2.cvtColor(cropped, cv2.COLOR_BGR2RGB)
    encode=face_recognition.face_encodings(cropped)
    return(encode)

def read_img(p):
    # img = Image.open(p)
    # display(img)
    img=cv2.imread(p)
    (h,w)=img.shape[:2]
    width=500
    ratio=width/float(w)
    height=int(h*ratio)
    return cv2.resize(img, (width, height))

# todo: move to function
def verify_person(year_of_birth,person_gender,photo_id,photo_clicked)->dict:
  img=Image.open(photo_id)
  img = img.convert('RGBA')
  pix = img.load()

  for y in range(img.size[1]):
      for x in range(img.size[0]):
          if pix[x, y][0] < 102 or pix[x, y][1] < 102 or pix[x, y][2] < 102:
              pix[x, y] = (0, 0, 0, 255)
          else:
              pix[x, y] = (255, 255, 255, 255)

  # img.save('/content/temp.png')

  pytesseract.pytesseract.tesseract_cmd = (
      r'/usr/bin/tesseract'
  )

  image_path_in_colab=photo_id
  text = pytesseract.image_to_string(Image.open(photo_id))

  print(text)

  yearline = []
  genline = []
  text1 = []
  text2 = []
  genderStr = '(Female|Male|emale|male|ale|FEMALE|MALE|EMALE)$'
  lines = text

  for wordlist in lines.split('\n'):
      xx = wordlist.split()
      if [w for w in xx if re.search('(Year|Birth|irth|YoB|YOB:|DOB:|DOB)$', w)]:
          yearline = wordlist
          break
      else:
          text1.append(wordlist)
  try:
      text2 = text.split(yearline, 1)[1]
  except Exception:
      pass


  try:
      yearline = re.split('Year of Birth|Birth|irth|YoB|YOB:|DOB:|DOB', yearline)[1:]
      yearline = ''.join(str(e) for e in yearline)
      if yearline:
          ayear = dparser.parse(yearline, fuzzy=True).year
  except Exception:
      pass
  birth=yearline[1::]

  ans_dict = {}

  ans_dict["yob"]=birth

  # Searching for Gender
  try:
      for wordlist in lines.split('\n'):
          xx = wordlist.split()
          if [w for w in xx if re.search(genderStr, w)]:
              genline = wordlist
              break 

      if 'Female' in genline or 'FEMALE' in genline:
          gender = "Female"
      if 'Male' in genline or 'MALE' in genline:
          gender = "Male"

      text2 = text.split(genline, 1)[1]
  except Exception:
      gender = "Other"
  
  ans_dict["gender"]=gender

  image = cv2.imread(photo_id)
  cropped = image[180:400, 200:400]
  cv2_imshow(cropped)
  cv2.waitKey(0)

  encodelistknown=findencoding(cropped)

  p=photo_clicked
  imgs=read_img(p)
  imgs=cv2.cvtColor(imgs, cv2.COLOR_BGR2RGB)

  facescurrframe=face_recognition.face_locations(imgs)
  encodecurrframe=face_recognition.face_encodings(imgs,facescurrframe)

  for encodeface,faceloc in zip(encodecurrframe, facescurrframe):
    matches=face_recognition.compare_faces(encodelistknown, encodeface)
    facedistance=face_recognition.face_distance(encodelistknown, encodeface)

  if (str(year_of_birth) == str(birth) and facedistance<0.5):
    # TODO: add to response
    print("Authentication Passed")
    ans_dict["verified"]=True
  else:
    # TODO: add to response
    # print("Enter the Correct information ")
    ans_dict["verified"]=False
  
  return ans_dict

import socket
print(socket.gethostbyname(socket.gethostname()))

import flask
!pip install flask-ngrok

from flask import Flask, jsonify, make_response, request
from flask_ngrok import run_with_ngrok
import threading
from flask import json

app=Flask(__name__)
run_with_ngrok(app)
app.config['UPLOAD_FOLDER'] = './'

@app.route('/idverify',methods=['POST'])
def idverify():
  try:
    form_data = request.form
    photo_id_img = request.files['photo_id']
    photo_clicked_img = request.files['photo_clicked']

    photo_id_img.save(os.path.join(app.config['UPLOAD_FOLDER'], photo_id_img.filename))
    photo_clicked_img.save(os.path.join(app.config['UPLOAD_FOLDER'], photo_clicked_img.filename))

    response_dic = verify_person(form_data['yob'],
                                 form_data['gender'],
                                 photo_id_img.filename,
                                 photo_clicked_img.filename)
    response = app.response_class(
          response=json.dumps(response_dic),
          status=200,
          mimetype='application/json'
      )
    return (response)

  except Exception as e:
    print(e)
    response = app.response_class(
          response=json.dumps({"error":"error verifying user"}),
          status=500,
          mimetype='application/json'
    )
    return response
  
  try: 
    os.remove(photo_clicked_img.filename)
    os.remove(photo_id.filename)
  except Exception as e:
    print(e)

app.run()

